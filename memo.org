#+title: MEMO
#+author: matsuyoshi30

* Parsing

** parseNumber の do-notation 記法を使わない書き方

#+begin_src haskell
parseNumber = do
  n <- many1 digit
  return $ (Number . read) n
-- とか
parseNumber = many1 digit >>= return . Number . read
parseNumber = many1 digit >>= \x -> return $ (Number . read) x
#+end_src

最初に

#+begin_src haskell
parseNumber = many1 digit >>= Number . read
#+end_src

って書いてたけど間違いで、 >>= の先の関数は bind 元と同じモナドを返さないといけなかった

#+begin_src
Main.hs:45:31: error:
    • Couldn't match type ‘LispVal’
                     with ‘Text.Parsec.Prim.ParsecT
                             String () Data.Functor.Identity.Identity LispVal’
      Expected type: [Char]
                     -> Text.Parsec.Prim.ParsecT
                          String () Data.Functor.Identity.Identity LispVal
        Actual type: String -> LispVal
    • In the second argument of ‘(>>=)’, namely ‘Number . read’
      In the expression: many1 digit >>= Number . read
      In an equation for ‘parseNumber’:
          parseNumber = many1 digit >>= Number . read
   |
45 | parseNumber = many1 digit >>= Number . read
   |
#+end_src

というエラー

** parseString を \" に対応させる

エスケープ文字をパーズする関数を作る

#+begin_src haskell
escapeChar :: Parser Char
escapeChar = do
  _ <- char '\\' -- backslash
  x <- oneOf "\\\"" -- backslask or double-quote
  return x
#+end_src

** 2進数を10進数に変換する

以下の通り変換できる

#+begin_src haskell
bin2dig = bin2dig' 0
bin2dig' digint "" = digint
bin2dig' digint (x:xs) =
  let old = 2 * digint + (if x == '0' then 0 else 1)
  in bin2dig' old xs
#+end_src

10111(23)を例に見てみる

#+begin_src haskell
bin2dig "10111"

bin2dig' 0 "1":"0111" =
  let old = 2 * 0 + 1
  in big2dig' old "0111"

     big2dig' 1 "0":"111" =
       let old = 2 * 1 + 0
       in big2dig' old "111"

          bin2dig' 2 "1":"11" =
            let old = 2 * 2 + 1
            in big2dig' old "11"

               bin2dig' 5 "1":"1" =
                 let old = 2 * 5 + 1
                 in big2dig' old "1"

                    big2dig' 11 "1" =
                      let old = 2 * 11 + 1
                      in big2dig' old ""

                         big2dig' 23 "" = 23
#+end_src

** R5RS の Character 対応

https://www.schemers.org/Documents/Standards/R5RS/HTML/r5rs-Z-H-9.html#%_sec_6.3.4

"#\" のあとに space や newline や一文字アルファベット、数字、左括弧が来たら Character としてパーズする

#+begin_src haskell
parseCharacter = do
  ch <- try $ do
    _ <- char '#'
    _ <- char '\\'
    c <- string "space" <|> string "newline" <|> do -- space か newline か一文字 anyChar
      x <- anyChar
      _ <- notFollowedBy alphaNum -- アルファベットもしくは数字が二文字以降に続くならパーズ失敗
      return [x]
    return c
  return $ Character $ case ch of
    "space" -> ' '
    "newline" -> '\n'
    _ -> ch !! 0
#+end_src

[[https://tnomura9.exblog.jp/15060690/][notFollowedBy について]]

** Haskell の分数表記

http://labs.timedia.co.jp/2012/11/haskell-1.html

/ のかわりに % を使うと有理数計算ができる( Data.Ratio のインポートが必要)

** List のパーズ

[[https://hackage.haskell.org/package/parsec-3.1.15.0/docs/Text-Parsec-Combinator.html#v:sepBy][sepBy]] で指定された区切り文字の内容をリスト化して返す

expr1, expr2, expr3 が [expr1, expr2, expr3] になる

リストの要素は Expr

** DottedList のパーズ

[[https://groups.csail.mit.edu/mac/ftpdir/scheme-7.4/doc-html/scheme_8.html][DottedList]] scheme では (a b . c) みたいな形でリストかける improper だけど

expr1 expr2 expr3 (最後も空白あり)が [expr1, expr2, expr3] になる

[[https://hackage.haskell.org/package/parsec-3.1.15.0/docs/Text-Parsec-Combinator.html#v:endBy][endBy]] で指定された内容と区切り文字の内容をリスト化して返す

** Vector のパーズ

#( で始まる文字列を Vector としてパーズする

[[https://www.schemers.org/Documents/Standards/R5RS/HTML/r5rs-Z-H-9.html#%_sec_6.3.6][scheme の Vector]] は要素数が固定されているので、 Haskell-Scheme の内部的には Data.Array を用いて Array としてデータを保持する

#+begin_src haskell
parseVector = do
  es <- try $ do
    _ <- char '#'
    _ <- char '('
    vals <- sepBy parseExpr spaces -- カッコ内の要素を LispVal のリストとしてパーズ
    _ <- char ')'
    return vals
  return $ Vector (listArray (0, (length es - 1)) es) -- Data.Array の listArray でリストを Array に変換
#+end_src

* Evaluation

** 関数適用

関数が第一級オブジェクトなので引数に持てる

関数適用のケースでは、リストの戦闘要素が関数として評価できる場合、その関数の処理内容を引っ張ってきてリストの残りの引数群に適用させればよい

ここでは以下のとおり apply を実装

#+begin_src haskell
apply :: String -> [LispVal] -> LispVal
apply func args = maybe (Bool False) ($ args) $ lookup func primitives
#+end_src

primitives に事前に定義した関数をターゲットに、評価対象の文字列が lookup で引っ張ってこれるか試す

引っ張ってこれなかったら Bool False を返すが、引っ張ってくることができれば引っ張ってきた処理内容を引数 args に適用する

#+begin_src haskell
maybe :: b -> (a -> b) -> Maybe a -> b
#+end_src

maybe は、第1引数には失敗したときに返す値を、第2引数には第3引数が渡されたときに第1引数と同じ型を返す関数を渡す

ここでは第1引数は lookup が失敗したとき（ primitives に適用できる関数がなかった）に返す Bool False :: LispVal が、第2引数にはセクション化された関数適用演算子と args が、第3引数には lookup の結果が渡されている

lookup が成功したときは、その結果の値が第2引数に渡した関数に適用されて、その結果が maybe の結果として返される。そのため、第1引数の型と、第2引数の関数が返す型は同じでなければならない

中置記法の $ は関数適用演算子だが、セクション化することで引数 args を適用する、引数に関数を期待する関数として書くことができる

#+begin_src haskell
-- Prelude> :t ($ 1)
($ 1) :: Num a => (a -> b) -> b
#+end_src

** エラーチェックと例外

Maybe モナドだと「失敗したかもしれない」という文脈をもたせることはできるが、「どういう失敗をするかもしれないか」まで情報を持てない

Either モナドを使ってエラーの内容を保持するように修正する

#+begin_src haskell
type ThrowsError = Either LispError
#+end_src

別途 LispError というエラー専用の型を定義して、 Either モナドの Left にそのエラー情報を持つような新たな型 ThrowsError を定義する

ThrowsError の Right は正常処理の結果が格納されるので、 ThrowsError から値を取る関数を別途定義

#+begin_src haskell
extractValue :: ThrowsError a -> a
extractValue (Right val) = val
#+end_src

あとはエラーが発生しうる各関数の戻り値を ThrowsError で包んで、 LispError から ThrowsError LispVal にする

エラーが発生する可能性のある箇所では、事前に定義したエラー型の値インスタンスを用いてエラー情報をカスタマイズする。このとき [[https://hackage.haskell.org/package/mtl-2.2.2/docs/Control-Monad-Error.html#v:throwError][throwError]] 関数を用いて戻り値を ThrowsError にする

#+begin_src haskell
-- Prelude Control.Monad.Except> :t throwError
throwError :: MonadError e m => e -> m a
#+end_src

これにより、エラー情報 e を受け取りモナド値に変換する

発生したエラーは最終的にどこかで catch される必要があるが、ここでは main で行う

#+begin_src haskell
-- Prelude Control.Monad.Except> :t catchError
catchError :: MonadError e m => m a -> (e -> m a) -> m a
#+end_src

上記の通り定義されている [[https://hackage.haskell.org/package/mtl-2.2.2/docs/Control-Monad-Error.html#v:catchError][catchError]]r 関数を用いてエラーを catch する。これはモナド値 m a と、エラー情報をモナド値に変換する関数 e -> m a を受け取り、モナド値を返すもの

#+begin_src haskell
trapError action = catchError action (return . show)
#+end_src

action (Either モナド)の結果が正常であれば当然処理すべきエラー情報はないのでそのままのモナド値が返る

エラーが発生している場合は、第2引数に指定された (return . show) によりエラー情報が ThrowsError の Right に設定される (handle previous errors and return to normal execution)

*** 関数適用の戻り値を Either に変換することに伴う他の変更

Either モナド導入前の関数適用の評価関数は以下の通り

#+begin_src haskell
eval (List (Atom func : args)) = apply func $ map eval args
#+end_src

リスト args に対して eval を map 適用し、返ってきたリストを引数にして func を apply することで逆にしている

Either モナド導入によって以下の通り変更

#+begin_src haskell
eval (List (Atom func : args)) = mapM eval args >>= apply func
#+end_src

mapM は第2引数に持つモナドの中の値に対して第1引数の関数を適用し、第2引数と同じ型のモナドを返すもの

>>= によって mapM の結果のモナドの中の値を右の処理に渡していて(bind)、ここではその値に対して func を apply している

あとは算術計算の関数系を例にすると

#+begin_src haskell
-- Either 導入前
numericBinOp op params = Number $ foldl1 op $ map unpackedNum params
-- Either 導入後
numericBinOp op params = mapM unpackedNum params >>= return . Number . foldl1 op
#+end_src

unpackedNum が ThrowsError モナドを戻り値として返すので、 unpackedNum params で引数の数値リストを LispVal から Number 型に変換するのに mapM を用いている

ここでも >>= bind によって mapM の結果のモナドの中の値を右の関数に渡している

右では fold1 op でリストを左から畳み込んで、その結果を Number に変換し、さらに return で ThrowsError に上げて返す

** Evaluation Part 2

他の primitive な関数をいろいろ定義

eqv? は引数のリスト（2要素）に対して要素の比較をする

リストの要素がリストである場合は、リストの長さをまずは比較して、同じ要素数であれば各要素を一つずつ見比べていく

#+begin_src haskell
eqv :: [LispVal] -> ThrowsError LispVal
eqv [(List arg1), (List arg2)] = return $ Bool $ (length arg1 == length arg2) && (all eqvPair $ zip arg1 arg2)
  where eqvPair (x1, x2) = case eqv [x1, x2] of
          Right (Bool val) -> val
          _ -> False
#+end_src

zip [xs] [ys] で xs と ys の各要素をそれぞれ取得して順にペアにしたリストを返す

これに対して、ローカル関数として定義した eqvPair でペアの左右を比較する。比較には eqv 自身を使い、引数にペアからリストを作って渡している

all を使用することによって、真偽判定関数と判定対象を要素に持つリストを引数に渡すことにより、結果を && でつないだときと同じような処理になる（これも畳み込みか）

*** equal?

scheme では等価性判定関数が3種類用意されている [[https://practical-scheme.net/gauche/man/gauche-refj/Deng-Jia-Xing-toBi-Jiao-.html][参考]]

今回は、 eq? と eqv? は値が同じであれば True を返すようにし、 equal? は Haskell 的に同じ値を表しているのであれば True を返す、という区分で定義する

つまり (equal? 2 "2") は True と返してほしい

比較関数周りの実装で、真偽値(#t, #f)や数値、文字列に対しては Unpack してジェネリックに扱えるようにした関数を作っていた。ここではこの Unpack 系関数を引数に適用し、 Unpack できた値が同じであれば True を返すようにする

真偽値、数値、文字列ごとにパターンマッチで処理を書いてもよいがほぼ同じ内容になるので、ここではこれらの Unpack 系関数をリスト化し、引数に対してリスト化された関数を mapM して適用する

Haskell 標準ではリストの要素は同データ型でないといけないが、 Unpack 系関数は真偽値は LispVal -> ThrowsError Bool で数値は LispVal -> ThrowsError Integer など関数の型が異なっているため、包括的な Unpacker というデータ型を定義して関数を値コンストラクタでラップしてリスト化する

#+begin_src haskell
data Unpacker = forall a. Eq a => AnyUnpacker (LispVal -> ThrowsError a)
#+end_src

この forall a. とはなにか。 GHC 拡張  とともにこれを付けないとコンパイル時に以下のエラーが発生する

#+begin_src shell
Main.hs:382:20: error: Not in scope: type variable ‘a’
    |
382 | data Unpacker = Eq a => AnyUnpacker (LispVal -> ThrowsError a)
    |                    ^

Main.hs:382:61: error: Not in scope: type variable ‘a’
    |
382 | data Unpacker = Eq a => AnyUnpacker (LispVal -> ThrowsError a)
#+end_src

ここではデータ型に対して型クラス制約を設けているが、その際使用されている型変数 a がスコープに無いというエラー

型変数なので、例えばある2つのデータ A と B に対してそれぞれ異なる型 Integer と String が型変数に入っていても問題ない（これらは型クラス制約 Eq を満たす）が、厳密には A と B は異なる型となり同一のリストに格納したりすることができない

この型の差異を、これらの型が存在する集合ととらえ、それを一つの型に集約するのが forall a. であり、これは存在型 Existential Type と呼ばれる

[[https://en.wikibooks.org/wiki/Haskell/Existentially_quantified_types][Haskell/Existentially quantified types]]

** REPL (Read - Eval - Print Loop)

ただただ文字列を標準出力に Flush するもの、プロンプトに入力された内容を読み取るもの、文字列を評価するもの、評価結果を出力するもの等、仕事ごとに関数を作る

無限ループは再帰で実現する。引数に終了条件を受けるようにする

>> は左の関数の結果を捨てて右の関数の処理に移る演算子

#+begin_src haskell
readPrompt prompt = flushStr prompt >> getLine -- Flush するけどその関数の戻り値は無視して getLine する

until_ terminateCond prompt action = do
  result <- prompt
  if terminateCond result
    then return ()
    else action result >> until_ terminateCond prompt action -- action result の戻り値は無視して再帰
#+end_src

今回は、プログラム起動時に引数がなければ REPL に、あればそれを評価して出力するようにしている（引数は0個もしくは1個を許容）

** Variables

scheme の変数はその名の通り可変で、何がどの値で定義されているかは状況によっては変更（更新）しないといけない

Haskell は純粋関数型なのでこういった可変な状況を取り扱うときにはちょっと考えないといけない

可変な状況を扱うものとして State モナドとかある。単一レイヤーの場合は単純な key-val のマップを保持することで対応できるし、その場合は State モナドでも行けそうなんだが、今回はネストされた関数間のスコープ制御とかクロージャとか考えると、これだと厳しい

なので今回は ST (State Thread) をつかう

#+begin_src haskell
type Env = IORef [(String, IORef LispVal)]
#+end_src

IORef は破壊的代入が可能なデータ構造で、ここでは2箇所で IORef を用いている。 scheme 環境全体の変数状況が可変なのと、個々の変数が可変なため

IORef は IO モナドの中でしか使えないので、 IORef の操作に伴うエラーは今ある Either LispError ではまかなえない。なので新しくエラーを表す型を定義する

#+begin_src haskell
type IOThrowsError = ExceptT LispError IO
#+end_src

ExceptT は別のモナドをエラーモナド(Either)と一緒に包含して新たなモナドを作る関数で以下のように定義されていて、このモナドを扱うときは runExceptT メソッドを用いる

#+begin_src haskell
-- Prelude Control.Monad.Except> :t ExceptT
ExceptT :: m (Either e a) -> ExceptT e m a
#+end_src

ある変数がその名前ですでに定義（束縛）されているかを確認する関数は、最初に定義した Env と確認したい変数名を受け取り、その Env 内に変数名がすでに定義されているかを確認する

IORef な変数の読み取りは readIORef で行い、モナド内の値は >>= bind で次の関数に渡す。すなわち、 IORef な Env を readIORef で読み取り、その結果を変数名で lookup する関数に渡す。見つからないかもしれないので結果は maybe で返す

#+begin_src haskell
isBound :: Env -> String -> IO Bool
isBound envRef var = readIORef envRef >>= return . maybe False (const True) . lookup var
#+end_src

変数の取得は、指定された変数名で取得できないケースをエラーと扱うようにすると、変数の取得で IO モナドとして行うがそれを上で定義した IOThrowsError に変換しないといけない

このために IO モナドから違うモナドに持ち上げる liftIO を用いる

変数の設定も同様に、先に指定された変数名で束縛されていない場合はエラーと扱うようにすると、取得時と同様に liftIO で持ち上げればよい。また IORef なデータへの書き込みは writeIORef で実行する

#+begin_src haskell
setVar envRef var val = do
  env <- liftIO $ readIORef envRef
  maybe (throwError $ UnboundVar "Setting an unbound variable" var)
    (liftIO . (flip writeIORef val))
    (lookup var env)
  return val
#+end_src

lookup で Env から IORef なデータを取得する処理が後ろに書かれていて、 writeIORef (IORef なデータ) 書き込みたい値 なので、 flip で引数適用順序を変えている

変数の設定でも事前にその変数名で束縛されていることを条件にしているので、実際に変数定義する処理はこれをラップするような形で実装する。すでに束縛されていれば上の setVar を使えばよくて、束縛されていなければ新たに変数名と IORef な値のペアを作って Env につなげる

#+begin_src haskell
defineVar envRef var val = do
  alreadyDefined <- liftIO $ isBound envRef var
  if alreadyDefined
    then setVar envRef var val >> return val
    else liftIO $ do
           valRef <- newIORef val
           env <- readIORef envRef
           writeIORef envRef ((var, valRef) : env)
           return val
#+end_src

あとは評価関数が引数に Env を引き受けるようにし、 Env を参照したり更新するような関数では適宜上記で定義した関数を使用すればよい

評価関数をまとめる evalString では、評価対象の文字列 expr を読み取ってパーズするときのエラーハンドリング liftThrows と、その結果を >>= bind で eval に渡して評価した結果を liftM で IOThrowsError に持ち上げて、 IOThrowsError をいい具合に処理する runIOThrows 関数に渡すように修正

#+begin_src diff
-evalString :: String -> IO String
-evalString expr = return $ extractValue $ trapError (liftM show $ readExpr expr >>= eval)
+evalString :: Env -> String -> IO String
+evalString env expr = runIOThrows $ liftM show $ (liftThrows $ readExpr expr) >>= eval env
#+end_src

** Define function

データ型に関数を追加する。まずは primitive な関数を表す PrimitiveFunc 型で、これはすでに定義した primitive な関数の辞書の型を見れば値コンストラクタとして中に引き受ける型もすぐわかる

関数適用を行う apply を修正する。これまでは文字列をパラメータに持ち、引き受けた文字列で primitive の辞書を lookup していたが、新しくデータ型に関数を追加したのでそれをそのまま適用させれば良い

#+begin_src haskell
apply (PrimitiveFunc func) args = liftThrows $ func args
#+end_src

適用結果は liftThrows で IOThrowsError に持ち上げる

関数適用つまりその関数と後続に続く引数の評価は、リストの先頭にある関数が Atom として評価を実施していたが、今回データ型を追加したことで Atom ではなくなった

#+begin_src haskell
eval env (List (func : args)) = do
  f <- eval env func
  argVals <- mapM (eval env) args
  apply f argVals
#+end_src

apply で IOThrowsError に持ち上げるようにしたのでここでは liftThrows しないようになっているが、べつに apply の戻り値の型を ThrowsError のままにして liftThrows で持ち上げるのは eval 側でやっても良い

で、上の修正によって primitive な関数を primitive な辞書から lookup しないようになっていて、じゃあ果たしてどこから primitive な関数を引っ張ってくるのかという話になるが、それは実は Env から引っ張ってくるようになっている

まず、 REPL 起動時に NULL な Env から初期処理を実施していた箇所を修正する。 nullEnv のままはいスタート、じゃなくて primitive な関数の情報を Env に設定する関数を書く

#+begin_src haskell
primitiveBindings :: IO Env
primitiveBindings = nullEnv >>= (flip bindVars $ map makePrimitiveFunc primitives)
  where makePrimitiveFunc (var, func) = (var, PrimitiveFunc func)
#+end_src

primitives という primitive 関数の辞書（リスト）に対し、リストの各要素（タプル）から PrimitiveFunc という今回新しく追加したデータ型に変換するローカル関数を map 経由で適用し、その結果と Null な Env を bindVars に渡している（bindVars はじつは前の変数のところで定義していたがそこでは用いない内容だったのでコメントアウトしていた）

#+begin_src haskell
bindVars envRef bindings = readIORef envRef >>= extendEnv bindings >>= newIORef
  where extendEnv bindings env = liftM (++ env) (mapM addBinding bindings)
        addBinding (var, val) = do
          ref <- newIORef val
          return (var, ref)
#+end_src

bindVars では Env と Env に適用する変数の束縛情報（のリスト）をパラメータに持ち、それらから新しい Env を生成する関数。まず readIORef で可変な Env の内容を読み取り、それをローカル関数 extendEnv に渡している。 extendEnv では読み取った Env の内容と Env に適用する変数の束縛情報 bindings をパラメータに持ち、 これまたローカル関数 addBinding を mapM で変数束縛情報リストに適用することで、 Env に変数の束縛情報を追加 (++) していく。 addBinding では変数名と束縛する内容をパラメータに持ち、変数内容から IORef を生成して返す（可変なので）だけ。

primitiveBindings とその中で用いる bindVars によって、 primitive な関数群が Env に変数として登録される。これを REPL 起動やワンライナー起動時に実行する

実際に primitive な関数が呼び出される順序は以下の通り。まず再掲だが関数適用の式は以下のように評価されるが、 eval env func の結果が実施する関数となっている

#+begin_src haskell
eval env (List (func : args)) = do
  f <- eval env func
  argVals <- mapM (eval env) args
  apply f argVals
#+end_src

これは =eval env (Atom id) = getVar env id= として処理され、関数名として渡された内容で getVar が実施される。getVar では Env から指定された変数を lookup して取得しており、これによって事前に Env に登録した primitive な関数を引っ張ってきている

#+begin_src haskell
getVar envRef var = do
  env <- liftIO $ readIORef envRef
  -- liftIO $ putStrLn "debug" -- これを仕込んで (+ 1 1) を実行すると、評価結果の 2 の前に debug という文字列が出力される
  maybe (throwError $ UnboundVar "Getting an unbound variable" var)
    (liftIO . readIORef)
    (lookup var env)
#+end_src

ここまでは関数定義じゃなくてその準備（ primitive という事前に定義した関数を Env にどうやって登録するか、登録した primitive な関数をどうやって Env から取得して適用するか）

ここから関数定義の話

関数は関数名、パラメータ（固定長）、可変長引数、関数本体、レキシカルスコープな Env によって構成されている。これの通り関数のデータ型を追加する。要素が多いので[[https://devtut.github.io/haskell/record-syntax.html][レコード構文]]を使う（公式のドキュメントだとどれなのかよくわからん）

#+begin_src haskell
Func { params :: [String], vararg :: (Maybe String), body :: [LispVal], closure :: Env }
#+end_src

ユーザー定義の関数を適用するにはまずパラメータの数をチェックする。定義されていた関数が要求するパラメータの個数と、関数適用時に渡している引数の個数があっているかどうか、あっていない場合可変長引数の利用があるかどうかをチェックする。このチェックに引っかかった段階で引数個数不正のエラーを返す

チェックを通過したら関数適用に入る。まずは zip 関数で渡された引数 args を params とのタプルのリストにし、それをレキシカルスコープな Env である closure に bindVars で変数束縛情報として追加する。次に可変長引数を処理するが、これも引数の処理とだいたい同じ流れをローカル関数 bindVarArgs で行っており、レキシカルスコープ closure に可変長引数の名前を渡した引数の余りである remainingArgs とタプル化して bindVars で追加する。可変長引数がないなら何もしないで closure を返すだけ。

で、本体の評価 evalBody に移る。レキシカルスコープ closure を引数にとった評価関数（評価対象を待っている）を mapM で関数本体 body に適用している。適用結果はリストとして返ってくるが、関数の戻り値は関数本体の body の最後の評価結果なのでリストの last を返す

#+begin_src haskell
apply (Func params varargs body closure) args =
  if num params /= num args && varargs == Nothing
    then throwError $ NumArgs (num params) args
    else (liftIO $ bindVars closure $ zip params args) >>= bindVarArgs varargs >>=
         evalBody
  where
    remainingArgs = drop (length params) args
    num = toInteger . length
    evalBody env = liftM last $ mapM (eval env) body
    bindVarArgs arg env =
      case arg of
        Just argName -> liftIO $ bindVars env [(argName, List $ remainingArgs)]
        Nothing -> return env
#+end_src

上記では関数の適用を見てきたが、任意の関数を定義するにはどうするか？ここでは define に手を入れる

#+begin_src haskell
eval env (List [Atom "define", Atom var, form]) = eval env form >>= defineVar env var
eval env (List (Atom "define" : List (Atom var : params) : body)) = makeNormalFunc env params body >>= defineVar env var
#+end_src

前者は Atom として受ける var を後続の form の評価内容で束縛するだけ（ define 含めて大外のリスト要素が3つ固定）だが、後者ではまず define のあとに任意の長さの var : params のリストを受けるようになっていて、 makeNormalFunc で関数定義の情報を作ったあとにそれを変数名に束縛している

makeNormalFunc は可変長引数がない makeFunc で、 makeFunc では追加した Func データ型のレコード構文の順番に沿って型引数を渡して Func 型のデータを作っている。パラメータは [String] なので showVal を map で適用している

#+begin_src haskell
makeFunc varargs env params body = return $ Func (map showVal params) varargs body env
makeNormalFunc = makeFunc Nothing
#+end_src

scheme では可変長引数は関数定義のときに DottedList で定義する

#+begin_src scheme
(define (three-args+ a b c . d)
  (list a b c d))
#+end_src

ので、関数定義に DottedList が使われているなら可変長引数が使われていると判断できるので、以下の通り関数定義を評価する

#+begin_src haskell
eval env (List (Atom "define" : DottedList (Atom var : params) varargs : body)) = makeVarArgs varargs env params body >>= defineVar env var
#+end_src

関数適用時に、可変長引数はその名前と「固定長のパラメータより多く渡された引数のリスト」を bindVars でレキシカルスコープに束縛している

#+begin_src haskell
apply (Func params varargs body closure) args =
  if num params /= num args && varargs == Nothing
    then throwError $ NumArgs (num params) args
    else (liftIO $ bindVars closure $ zip params args) >>= bindVarArgs varargs >>=
         evalBody
  where
    remainingArgs = drop (length params) args
    num = toInteger . length
    evalBody env = liftM last $ mapM (eval env) body
    bindVarArgs arg env =
      case arg of
        Just argName -> liftIO $ bindVars env [(argName, List $ remainingArgs)] -- ココ！
        Nothing -> return env
#+end_src

可変長引数、実装してみたは良いけどどう確認するとよいのかな。プリント系使えそうだけど primitive な関数にまずプリント系入れるところからやったほうがいいかな

** IO Primitive and Port

今の状態だとワンライナー的な使い方か、もしくは REPL 起動していちいちタイプして実行しかない。ファイルから内容をロードして実行できるようにする

また、 Haskell-Scheme がファイルから読み込むのとは別に、読み込むファイルがまた別のファイル操作関数をつかっているときにも対応できるように、 scheme の IO 関連関数を ioPrimitives として定義しておく

まずは IO 関連のエラーを返しうる関数のデータ型を定義。これまで定義してきた関数は IO 関連のエラー IOThrowsError じゃなくて ThrowsError を戻り値としているので、ここでは別のデータ型として追加

#+begin_src haskell
IOFunc ([LispVal] -> IOThrowsError LispVal)
#+end_src

scheme で IO 関連の処理を表す関数用のデータ型も追加しておく。これは scheme で [[https://www.schemers.org/Documents/Standards/R5RS/HTML/r5rs-Z-H-9.html#%_sec_6.6.1][Port]] と呼ばれる種類の関数群を示すが、内部的には Haskell の IO 関連の処理を扱える [[https://hackage.haskell.org/package/base-4.16.0.0/docs/GHC-IO-Handle.html][Handle]] というデータ型をラップするように定義した

#+begin_src haskell
Port Handle
#+end_src

例えば、 scheme でいう open-input-file 関数（ファイル名を指定して、それの入力ポートを取得する）は、 IO Handle を返す [[https://hackage.haskell.org/package/base-4.16.0.0/docs/System-IO.html#v:openFile][openFile]] 関数（ファイル名とオープンのモードを指定）で定義する

#+begin_src haskell
-- open-input-file は makePort ReadMode
makePort :: IOMode -> [LispVal] -> IOThrowsError LispVal
makePort mode [String filename] = liftM Port $ liftIO $ openFile filename mode
#+end_src

ファイルの中身を読み込んで ExprList としてパーズするヘルパー関数も追加しておく。 REPL でも使える load 関数はこのヘルパー関数を呼び出すだけ

#+begin_src haskell
load :: String -> IOThrowsError [LispVal]
load filename = (liftIO $ readFile filename)  >>= liftThrows . readExprList

eval env (List [Atom "load", String filename]) = load filename >>= liftM last . mapM (eval env)
#+end_src

なお、今まではワンライナーもしくは REPL に打ち込まれた単一の Expr を読み取って評価すればよかったが、ファイルから読み込むとなるとファイル内に複数の Expr が書かれている可能性が高い（というか用途的にだいたいそう）ので、複数の Expr に対応するために読み取り処理を修正する

#+begin_src haskell
readOrThrow :: Parser a -> String -> ThrowsError a
readOrThrow parser input = case parse parser "lisp" input of
  Left err -> throwError $ Parser err
  Right val -> return val

readExpr = readOrThrow parseExpr
readExprList = readOrThrow (endBy parseExpr spaces)
#+end_src

Expr を読み込んでパーズするのは別関数に切り出し、単一かもしくはリストかで関数を分ける。 REPL のときは単一で良くて、ファイルからの場合はリストの方を使う

あとは、Haskell-Scheme 起動時に引数が与えられた場合は、ワンライナー実行ではなくファイル名指定とみなすよう修正する

#+begin_src diff
-runOne :: String -> IO ()
-runOne expr = primitiveBindings >>= flip evalAndPrint expr
+runOne :: [String] -> IO ()
+runOne args = do
+  env <- primitiveBindings >>= flip bindVars [("args", List $ map String $ drop 1 args)]
+  (runIOThrows $ liftM show $ eval env (List [Atom "load", String (args !! 0)])) >>= hPutStrLn stderr
#+end_src

primitiveBindings では primitive な関数（今回追加した IO 系含む）を環境に追加していて、かつプログラム起動時の引数に与えられたファイル名を args という変数に束縛して追加している

そのあとに評価に移るが、定義した load 関数はファイル名を一つしか引き受けないので、ここではプログラム起動時の引数に複数のファイルが渡されても一番最初のもののみロードする

以上の作業により、外部ファイルを読み込んだりその内容を評価したりすることができるようになった！

#+begin_src scheme
; sample.scm
(define x 5)
(define y (+ x 1))
(define z (* y 2))
#+end_src

#+begin_src shell
% ./Main sample.scm
12
% ./Main
MINI Haskell-Scheme >>> (load "sample.scm")
12
MINI Haskell-Scheme >>>
#+end_src
